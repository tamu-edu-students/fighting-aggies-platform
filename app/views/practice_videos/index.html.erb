<%= stylesheet_link_tag "practice_videos", "data-turbo-track": "reload" %>

<div id="page-container">
  <%= link_to "Log Out", logout_path,  id: "log_out", style:"position: absolute; top: 3%; right: 2%; z-index: 10; text-align: center; padding: 5px 10px; border-radius: 10px; background: grey; color: white; text-decoration: none" %>

  <div id="left-panel">
    <div style="width: 100%; height: 90%; overflow: scroll;">

      <h3 id="search-title">Search</h3>

      <%= text_field_tag(:search, params[:search], id: 'search-input', placeholder: 'Video Name') %>

      <% @practice_videos.each do |practice_video| %>
        <div id="class-video-item">
          <p><%= practice_video.video_name %></p>
          <div style="display: flex; flex=direction: row; justify-content: space-between; align-items: center;">
            <%= link_to "Edit", edit_practice_video_path(practice_video.id), id:'video-edit' %>
            <p><%= practice_video.video_upload_date.strftime('%m/%d/%Y') %></p>
          </div>
        </div>
      <% end %>
    </div>
    <%= link_to "Add Video", new_practice_video_path, id:"video-add" %>
  </div>
  <div id="right-panel">
    <div id='headers'>
      <h1>Videos Dashboard</h1>
      <p id='notice'><%= notice %></p>
    </div>
    <div id="practice-videos">
      <% @practice_videos.each do |practice_video| %>
        <%= render practice_video %>
      <% end %>
    </div>
  </div>
  <div>
  </div>

  <script>
    (function() {
      let selected_video = "none";
      let input = document.getElementById('search-input');
      let videos = document.querySelectorAll('#class-video-item');
      let display_videos = document.querySelectorAll('#practice-video-container');

      input.addEventListener('input', () => {
        videos.forEach(video => {
          const p = video.querySelector("p");
          if(!fuzzy_search(input.value.toLowerCase() ,p.textContent.toLowerCase())) video.style.display = "none"
          else video.style.display = "flex"
        }) 
      });

      if(display_videos.length !== 0) {
        display_videos[0].style.display = 'block';
      }

      videos.forEach(video => {
        video.addEventListener('click', () => {
          const p = video.querySelector("p");
          selected_video = p.textContent

          display_videos.forEach(display_video => {
            const video_name = display_video.querySelector("#video_name").textContent.trim()
            if(video_name === selected_video){
              display_video.style.display='block'
            }else{
              display_video.style.display='none'
            }
          })
        })
      })

      function fuzzy_search(needle, haystack) {
        let hlen = haystack.length;
        let nlen = needle.length;
        if (nlen > hlen) {
          return false;
        }
        if (nlen === hlen) {
          return needle === haystack;
        }
        outer: for (let i = 0, j = 0; i < nlen; i++) {
          let nch = needle.charCodeAt(i);
          while (j < hlen) {
            if (haystack.charCodeAt(j++) === nch) {
              continue outer;
            }
          }
          return false;
        }
        return true;
      }
    })();

</script>
